{"version":3,"sources":["ThingsToReplace.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["ThingsToReplace","addToReplacementArray","useState","fieldName","setFieldName","newText","setNewText","action","onSubmit","event","preventDefault","submitHandler","htmlFor","type","aria-label","placeholder","value","onChange","target","name","header","className","App","textInput","setTextInput","replacements","setReplacements","finalText","setFinalText","originalText","setOriginalText","Header","onClick","fieldToReplace","map","items","arr","str","console","log","string","i","length","replace","replaceText","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc6b1e5e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction ThingsToReplace({addToReplacementArray}) {\n  const [fieldName, setFieldName] = useState(\"\")\n  const [newText, setNewText] = useState(\"\")\n\n  const setField = (event) => {\n    setFieldName(event.target.value)\n  }\n  \n  const setText = (event) => {\n    setNewText(event.target.value)\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    setNewText(\"\")\n    setFieldName(\"\")\n  }\n  \n  return (\n      <form action=\"submit\" onSubmit={(event) =>{\n        addToReplacementArray(fieldName, newText); submitHandler(event)} }>\n          Replace\n          <label htmlFor=\"fieldName\"></label>\n        <input type=\"text\" aria-label=\"field to replace, example < name >\" placeholder=\"ex. < name >\" \n        value={fieldName} onChange={setField} name=\"fieldName\"\n        />\n        with\n         <label htmlFor=\"text\"></label>\n        <input type=\"text\" aria-label=\"text to replace, example John\" placeholder=\"ex. John\" value={newText} onChange={setText} name=\"text\"/>\n        <input type=\"submit\" />\n      </form>\n  )\n}\n\nexport default ThingsToReplace","import React from \"react\"\n\nfunction header () {\n    return (\n        <header>\n            <h1>Cover Letter made Easy</h1>\n            <p>Tired of replacing addressee, company name, and job title manually? Try this app.</p>\n            <div className=\"sample\">\n                <div className=\"steps\">\n                    <h2>How to Use</h2>\n                    <p>The app is broken up into 2 parts. Replacements and Template. Please follow the steps below to see how the app works.</p>\n                </div>\n                <div className=\"steps\">\n                    <h3>Step 1: Submit your Template</h3>\n                    <p>You can replace ANY word you want but for best results I recommend putting the fields you want to replace in a \"container\". This can be greater than and less than signs or square brackets.</p>\n                    <p>Try it yourself! Copy the text below and paste it into template input.</p>\n                    <p className=\"example\">Hi [NAME], my name is Jessie I recently applied to be a [JOB] at [COMPANY].</p>\n                </div>\n                <div className=\"steps\">\n                    <h3>Step 2: Submit your Replacements</h3>\n                    <p>You can input as many replacements as you'd like</p>\n                    <p>In our example we have three. Please submit the following:</p>\n                    <ul className=\"example\">\n                        <li>[NAME], Giovanni</li>\n                        <li>[JOB], Grunt</li>\n                        <li>[COMPANY], Team Rocket</li>\n                    </ul>\n                    <p>You know you've done it correctly when three bullet points show up</p>\n                </div>\n                <div className=\"steps\">\n                    <h3>Step 3: Update Text</h3>\n                    <p>Assuming you've done everything correctly replacements will happen when you press \"Update Text.\"</p>\n                    <p>Note this app is case sensitive. Please make sure your inputs match up.</p>\n                </div>\n                \n                {/* <h4>What do the other buttons do?</h4>\n                <ul>\n                    <li>Revert Text: Reverts your template back to its original input. Use this with \"Clear Replacements\" to start a new cover letter without having to re-enter the template</li>\n                    <li>Clear Replacements: Clears the replacements</li>\n                    <li>Clear All: Start anew</li>\n                </ul> */}\n            </div>\n        </header>\n    )\n}\n\nexport default header","import React, { useState } from \"react\";\nimport ThingsToReplace from \"./ThingsToReplace\"\nimport Header from \"./Header\"\nimport \"./App.css\";\n\n\nfunction App() {\n  const [textInput, setTextInput] = useState(\"\");\n  const [replacements, setReplacements] = useState([])\n  const [finalText, setFinalText] = useState(\"\")\n  const [originalText, setOriginalText] = useState(\"\")\n\n  const textInputHandler = (event) => {\n    event.preventDefault()\n    setTextInput(event.target.value)\n  }\n\n  const addToReplacementArray = (fieldToReplace, newText) => {\n    setReplacements([\n      ...replacements,\n      {\n        fieldToReplace: fieldToReplace,\n        newText: newText\n      }\n    ])\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    setFinalText(textInput)\n    setOriginalText(textInput)\n    setTextInput(\"\")\n  }\n\n  const replaceText = (arr, str) => {\n    console.log(arr, \"this is my arr\")\n    console.log(str, \"this is my string\")\n\n    let string = \"\"\n    for (let i = 0; i < arr.length; i++){\n      if (i === 0){\n        string = str.replace(arr[i].fieldToReplace, arr[i].newText)\n      } else {\n        string = string.replace(arr[i].fieldToReplace, arr[i].newText)\n      }\n      setFinalText(string)\n    }\n  }\n\n  const deleteAll = () => {\n    if (window.confirm('Are you sure you want to clear everything?')) {\n      setReplacements([])\n      setFinalText(\"\")\n      setOriginalText(\"\")\n    }\n}\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <main>\n        <div className=\"replacements\">\n          <button onClick={() => { setReplacements([]) }}>Clear Replacements</button>\n          <ThingsToReplace addToReplacementArray={addToReplacementArray} />\n          <div className=\"mappedObjects\">\n            <ul>\n              {replacements.map((items) =>\n                <li>Replace {items.fieldToReplace} with {items.newText}\n                </li>)\n              }\n            </ul>\n          </div>\n        </div>\n        <div className=\"template\">\n          <div>\n            <button onClick={() => { replaceText(replacements, finalText) }}>Update Text</button>\n            <button onClick={() => { setFinalText(originalText) }}>Revert Text</button>\n            <button onClick={() => { setFinalText(\"\") }}>Clear Template</button>\n            <button onClick={deleteAll}>Clear All</button>\n          </div>\n          <form action=\"submit\" onSubmit={submitHandler}>\n            <label>Input your template</label>\n            <input type=\"text\" name=\"textInput\" onChange={textInputHandler} value={textInput} />\n          </form>\n          <textarea value={finalText}></textarea>\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}